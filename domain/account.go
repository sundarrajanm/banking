package domain

import (
	"banking/dto"
	"banking/errs"
)

type Account struct {
	AccountId   string `db:"account_id"`
	CustomerId  string `db:"customer_id"`
	AccountType string `db:"account_type"`
	OpeningDate string `db:"opening_date"`
	Amount      float64
	Status      string
}

func (a Account) ToNewAccountResponseDTO() dto.NewAccountResponse {
	return dto.NewAccountResponse{AccountId: a.AccountId}
}

type AccountRepository interface {
	// Create a new account and return the account with autogenerated account id.
	Save(Account) (*Account, *errs.AppError)

	// Get the Account by AccountId
	GetAccount(string) (*Account, *errs.AppError)

	// Deduct the given amount from the Account
	Debit(float64, string) *errs.AppError

	// Add the given amount to the Account
	Credit(float64, string) *errs.AppError
}
